package cn.redcdn.jmeetingsdk;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Handler;import android.os.Message;import android.telephony.PhoneStateListener;import android.telephony.SignalStrength;import android.telephony.TelephonyManager;import android.util.Log;import java.util.ArrayList;import java.util.List;import java.util.Timer;import java.util.TimerTask;import cn.redcdn.commonutil.NetConnectHelper;public class PhoneStateMonitor extends PhoneStateListener {	public static final int NETWORK_CLASS_2_G = 2;	public static final int NETWORK_CLASS_3_G = 3;	public static final int NETWORK_CLASS_4_G = 4;	public static final int NETWORK_CLASS_UNKNOWN = 0;	private ConnectivityManager connectivityManager;	private NetworkInfo info;	private Context mContext;	private static PhoneStateMonitor mInstance;	private List<SignalStrengthChangerListener> mPhoneStateMonitorList = null;	private String TAG = "PhoneStateMonitor";	private int mSignalStrength = 99;	private WifiInfo wifiInfo = null;	private int type;	private TelephonyManager telephoneManager = null;	private WifiManager wifiManager = null;	private int mRSSI = -200;	private int mLinkSpeed = 0;	private Timer timer = null;	private TimerTask task = null;	private Handler mHandler = null;	/*	 * wifiinfo.getRssi() 得到的值是一个0到-100的区间值，是一个int型数据.	 * 	 * 其中0到-50表示信号最好，-50到-70表示信号偏差，小于-70表示最差，有可能连接不上或者掉线，一般Wifi已断则值为-200。	 */	private BroadcastReceiver mReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {			// TODO Auto-generated method stub			String action = intent.getAction();			if (action.equals("android.net.wifi.RSSI_CHANGED")) {				// Log.e(TAG, "收到android.net.wifi.RSSI_CHANGED");				wifiInfo = wifiManager.getConnectionInfo();				if (wifiInfo != null) {					if (wifiInfo.getBSSID() != null) {						mRSSI = wifiInfo.getRssi();						mLinkSpeed = wifiInfo.getLinkSpeed();						// Log.e(TAG, "更新值  mRSSI = "+ mRSSI + " mLinkSpeed= " +						// mLinkSpeed);						autoGetStrength();					}				}			}		}	};	/*	 * 	 * @mSignalStrength : Valid values are (0-31, 99),99表示无信号	 */	@Override	public void onSignalStrengthsChanged(SignalStrength signalStrength) {		// TODO Auto-generated method stub		super.onSignalStrengthsChanged(signalStrength);		//Log.e(TAG, "onSignalStrengthsChanged,mSignalStrength = "		//		+ mSignalStrength + "");		mSignalStrength = signalStrength.getGsmSignalStrength();		autoGetStrength();	}	public static synchronized PhoneStateMonitor getInstance(Context context) {		if (mInstance == null) {			mInstance = new PhoneStateMonitor(context);		}		return mInstance;	}	private PhoneStateMonitor(Context context) {		mContext = context;		Log.e("PhoneState", "构造");		mPhoneStateMonitorList = new ArrayList<SignalStrengthChangerListener>();		connectivityManager = (ConnectivityManager) context				.getSystemService(context.CONNECTIVITY_SERVICE);		wifiManager = (WifiManager) context				.getSystemService(Context.WIFI_SERVICE);		wifiInfo = wifiManager.getConnectionInfo();		if (wifiInfo != null) {			mRSSI = wifiInfo.getRssi();			mLinkSpeed = wifiInfo.getLinkSpeed();		}		Log.e("PhoneState", "初始值 .mRSSI = " + mRSSI + " mLinkSpeed= "				+ mLinkSpeed);		IntentFilter mFilter = new IntentFilter();		mFilter.addAction(WifiManager.RSSI_CHANGED_ACTION);		context.registerReceiver(mReceiver, mFilter);		telephoneManager = (TelephonyManager) mContext				.getSystemService(Context.TELEPHONY_SERVICE);		telephoneManager.listen(PhoneStateMonitor.this,				PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);		mHandler = new Handler() {			public void handleMessage(Message msg) {				super.handleMessage(msg);				wifiInfo = wifiManager.getConnectionInfo();				if (wifiInfo != null) {								mRSSI = wifiInfo.getRssi();				mLinkSpeed = wifiInfo.getLinkSpeed();				// Log.d(TAG, "handleMessage, mRSSI= " + mRSSI + " mLinkSpeed= "				// + mLinkSpeed);								}			}		};		timer = new Timer();		task = new TimerTask() {			public void run() {				mHandler.sendEmptyMessage(0);			}		};		timer.schedule(task, 0, 3000);		Log.d(TAG, "timer运行");	}	public void addListener(SignalStrengthChangerListener listener) {		if (mPhoneStateMonitorList != null) {			Log.e("PhoneState", "非空");		} else			Log.e("PhoneState", "空");		if (!mPhoneStateMonitorList.contains(listener)) {			mPhoneStateMonitorList.add(listener);		}		Log.e(TAG, "addListener");		autoGetStrength();	}	public void removeListener(			SignalStrengthChangerListener listener) {		if (mPhoneStateMonitorList.contains(listener)) {			mPhoneStateMonitorList.remove(listener);		}		Log.e(TAG, "removeListener ");	}	private void autoGetStrength() {		//Log.e(TAG, "autoGetStrength ");		for (SignalStrengthChangerListener listener : mPhoneStateMonitorList) {			listener.onStrengthChanged();		}	}	// 作废	// public int getSignalStrength() {	// return mSignalStrength;	// }	public int getRSSI() {		if (NetConnectHelper.getNetWorkType(mContext) == NetConnectHelper.NETWORKTYPE_WIFI) {			return mRSSI;		} else if (NetConnectHelper.getNetWorkType(mContext) == NetConnectHelper.NETWORKTYPE_2G				|| NetConnectHelper.getNetWorkType(mContext) == NetConnectHelper.NETWORKTYPE_3G) {			return mSignalStrength;		} else {			return -1;		}	}	public int getLinkSpeed() {		if (NetConnectHelper.getNetWorkType(mContext) == NetConnectHelper.NETWORKTYPE_WIFI) {			return mLinkSpeed;		} else {			return 0;		}	}	public interface SignalStrengthChangerListener {		public void onStrengthChanged();	}}