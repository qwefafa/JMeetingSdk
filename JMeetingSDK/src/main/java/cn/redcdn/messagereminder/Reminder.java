package cn.redcdn.messagereminder;import android.content.Context;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.media.MediaPlayer.OnErrorListener;import android.net.Uri;import android.os.Handler;import android.os.Message;import android.view.View;import android.view.WindowManager;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import java.io.IOException;import java.util.Timer;import java.util.TimerTask;import cn.redcdn.log.CustomLog;import cn.redcdn.util.MResource;public abstract class Reminder {  private String tag = Reminder.class.getName();  private String alarmPath;  private String message;  private int messageIconID;  protected boolean openSound = true;  private WindowManager windowManager;  private WindowManager.LayoutParams windowManagerParams;  private LinearLayout msgLinearLayout;  private int HIDE_MESSAGE_WINDOW = 1;  private int messageWindowShowTime = 10 * 1000;  private int messageWindowWidth = 1280;  private int messageWindowHeight = 68;  protected Context context;  private MessageReminderView mMessageReminderView;  private MediaPlayer mp;  private Timer hideMessageTimer;  enum State {    SHOW, HIDE  };  State state = State.HIDE;  private Handler handler = new Handler() {    @Override    public void handleMessage(Message msg) {      if (HIDE_MESSAGE_WINDOW == msg.what) {        CustomLog.i(tag, "handle HIDE_MESSAGE_WINDOW message");        if (State.HIDE == state) {          CustomLog.e(tag, "message windows has hide");          return;        }        state = State.HIDE;        hideMessageTimer = null;        stopPlayAlarm();        stopInternal();        releaseUI();        onAutoHide();      }    }  };  public void setAlarm(String path) {    alarmPath = path;  }  public void setMessage(String msg) {    message = msg;  }  public void setMessageIcon(int iconID) {    messageIconID = iconID;  }  public void setOpenSound(boolean openSound) {    this.openSound = openSound;  }  public int startShow(Context context, MessageReminderView messageReminderView) {    CustomLog.i(tag, "show message reminder");    if (null == alarmPath || null == message || alarmPath.isEmpty()        || message.isEmpty()) {      CustomLog.e(tag, "need set init parameter");      return -1;    }    if (State.SHOW == state) {      CustomLog.e(tag, "message windows is show now");      return -2;    }    this.context = context;    initUI(messageReminderView);    hideMessageTimer = new Timer();    hideMessageTimer.schedule(new TimerTask() {      @Override      public void run() {        CustomLog.i(tag, "deadtime, hide message window");        handler.sendEmptyMessage(HIDE_MESSAGE_WINDOW);      }    }, messageWindowShowTime);    int ret = 0;    if (openSound) {      ret = playAlarm();    } else {      playAlarmFinished();    }    state = State.SHOW;    return ret;  }  public void stopShow() {    CustomLog.i(tag, "hide message reminder");    if (State.HIDE == state) {      CustomLog.e(tag, "message windows has hide");      return;    }    state = State.HIDE;    hideMessageTimer.cancel();    hideMessageTimer = null;    stopPlayAlarm();    stopInternal();    releaseUI();  }  private void initUI(MessageReminderView messageReminderView) {    CustomLog.i(tag, "show ui");    mMessageReminderView = messageReminderView;    msgLinearLayout = (LinearLayout) messageReminderView        .findViewById(MResource.getIdByName(context, MResource.ID, "msgLinearLayout"));    msgLinearLayout.setVisibility(View.VISIBLE);    ImageView msgIcon = (ImageView) messageReminderView.findViewById(MResource.getIdByName(context, MResource.ID, "msgIcon"));    msgIcon.setBackgroundResource(messageIconID);    TextView msgTextView = (TextView) messageReminderView        .findViewById(MResource.getIdByName(context, MResource.ID, "msgTextView"));    msgTextView.setText(message);    mMessageReminderView.setVisibility(View.VISIBLE);  }  private void releaseUI() {    CustomLog.i(tag, "hide ui");    mMessageReminderView.setVisibility(View.INVISIBLE);  }  protected int playAlarm() {    CustomLog.i(tag, "begin play alarm:" + alarmPath);    mp = new MediaPlayer();    mp.setOnCompletionListener(new OnCompletionListener() {      @Override      public void onCompletion(MediaPlayer mp) {        if (State.HIDE == state) {          CustomLog.w(tag, "message windows has hide");          return;        }        if (null != mp) {          mp.release();          mp = null;        }        CustomLog.i(tag, "play alarm finish");        playAlarmFinished();      }    });    mp.setOnErrorListener(new OnErrorListener() {      @Override      public boolean onError(MediaPlayer mp, int what, int extra) {        if (State.HIDE == state) {          CustomLog.w(tag, "message windows has hide");          return false;        }        if (null != mp) {          mp.release();          mp = null;        }        CustomLog.i(tag, "play alarm failed");        playAlarmFinished();        return false;      }    });    try {      mp.setDataSource(          context,          Uri.parse("android.resource://" + context.getPackageName() + "/"              + alarmPath));      mp.prepare();      mp.start();    } catch (IllegalArgumentException e) {      CustomLog.e(tag, "play alarm error:" + e.getMessage());      e.printStackTrace();      return -3;    } catch (IllegalStateException e) {      CustomLog.e(tag, "play alarm error:" + e.getMessage());      e.printStackTrace();      return -3;    } catch (IOException e) {      CustomLog.e(tag, "play alarm error:" + e.getMessage());      e.printStackTrace();      return -3;    }    return 0;  }  protected void stopPlayAlarm() {    CustomLog.i(tag, "release mediaplayer");    if (null != mp) {      try {        mp.stop();      } catch (IllegalStateException e) {        CustomLog.e(tag, "stop mediaplayer error:" + e.getMessage());      }      mp.release();      mp = null;    }  }  protected void stopInternal() {  }  protected void playAlarmFinished() {  }  protected abstract void onAutoHide();}