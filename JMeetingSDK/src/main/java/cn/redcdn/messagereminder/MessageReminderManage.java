package cn.redcdn.messagereminder;import android.content.Context;import android.os.Handler;import android.os.Message;import java.util.ArrayList;import cn.redcdn.log.CustomLog;import cn.redcdn.util.MResource;public class MessageReminderManage {  private String tag = MessageReminderManage.class.getName();  private boolean openSound = true;  private boolean openTTS = false;  private int MESSAGE_REMINDER_TAG = 1;  private ArrayList<MessageInfo> meetingMessageList;  private Context context;  private MessageReminderView mMessageReminderView;  private Reminder currentReminder;  private Boolean isShowReminder = false;  public static int JOIN_MEETING = 1;  public static int EXIT_MEETING = 2;  public static int MEETING_INVITE = 3;  public static int BEGIN_SPEAK = 4;  public static int REQUEST_SPEAK = 5;  public static int LOCK_MEETING_OR_NOT = 6;  private Handler handler = new Handler() {    @Override    public void handleMessage(Message msg) {      if (MESSAGE_REMINDER_TAG == msg.what && isShowReminder) {        if (meetingMessageList.size() > 0) {          MessageInfo info = meetingMessageList.remove(0);          if (JOIN_MEETING == info.type) {            joinReminder(info.msg);          } else if (EXIT_MEETING == info.type) {            exitReminder(info.msg);          } else if (MEETING_INVITE == info.type) {            inviteReminder(info.msg);          } else if (BEGIN_SPEAK == info.type) {            speakingNowReminder(info.msg);          } else if (REQUEST_SPEAK == info.type) {            requestSpeakReminder(info.msg);          } else if (LOCK_MEETING_OR_NOT == info.type) {            lockMeetingOrNotReminder(info.msg);          } else {            CustomLog.w(tag, "invalidate message type");          }        } else {          CustomLog.w(tag, "meeting reminder message list empty");          isShowReminder = false;        }      }    }  };  private void lockMeetingOrNotReminder(String msg) {    CustomLog.i(tag, "show lockMeetingOrNotReminder message");    currentReminder = new Reminder() {      @Override      protected void onAutoHide() {        CustomLog.i(tag, "show lockMeetingOrNotReminder message finish");        currentReminder = null;        handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);      }    };    currentReminder.setMessage(msg);    currentReminder.setAlarm(Integer.toString(MResource.getIdByName(context, MResource.RAW, "jmeetingsdk_join")));    currentReminder.setMessageIcon(MResource.getIdByName(context, MResource.DRAWABLE, "jmeetingsdk_message_reminder_join"));    currentReminder.setOpenSound(false);    if (0 != currentReminder.startShow(context, mMessageReminderView)) {      currentReminder = null;      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }  private void joinReminder(String msg) {    CustomLog.i(tag, "show joinReminder message");    currentReminder = new JoinReminder() {      @Override      protected void onAutoHide() {        CustomLog.i(tag, "show joinReminder message finish");        currentReminder = null;        handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);      }    };    currentReminder.setMessage(msg);    currentReminder.setAlarm(Integer.toString(MResource.getIdByName(context, MResource.RAW, "jmeetingsdk_join")));    currentReminder.setMessageIcon(MResource.getIdByName(context, MResource.DRAWABLE, "jmeetingsdk_message_reminder_join"));    currentReminder.setOpenSound(openSound);    if (0 != currentReminder.startShow(context, mMessageReminderView)) {      currentReminder = null;      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }  private void exitReminder(String msg) {    CustomLog.i(tag, "show exitReminder message");    currentReminder = new ExitReminder() {      @Override      protected void onAutoHide() {        CustomLog.i(tag, "show exitReminder message finish");        currentReminder = null;        handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);      }    };    currentReminder.setMessage(msg);    currentReminder.setAlarm(Integer.toString(MResource.getIdByName(context, MResource.RAW, "jmeetingsdk_exit")));    currentReminder.setMessageIcon(MResource.getIdByName(context, MResource.DRAWABLE, "jmeetingsdk_message_reminder_exit"));    currentReminder.setOpenSound(false);    if (0 != currentReminder.startShow(context, mMessageReminderView)) {      currentReminder = null;      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }  private void inviteReminder(String msg) {    CustomLog.i(tag, "show inviteReminder message");    currentReminder = new InviteReminder() {      @Override      protected void onAutoHide() {        CustomLog.i(tag, "show inviteReminder message finish");        currentReminder = null;        handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);      }    };    currentReminder.setMessage(msg);    currentReminder.setAlarm(Integer.toString(MResource.getIdByName(context, MResource.RAW, "jmeetingsdk_invite")));    currentReminder.setMessageIcon(MResource.getIdByName(context, MResource.DRAWABLE, "jmeetingsdk_message_reminder_invite"));    currentReminder.setOpenSound(openSound);    if (0 != currentReminder.startShow(context, mMessageReminderView)) {      currentReminder = null;      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }  private void speakingNowReminder(String msg) {    CustomLog.i(tag, "show speakingNowReminder message");    SpeakingNowReminder reminder = new SpeakingNowReminder() {      @Override      protected void onAutoHide() {        CustomLog.i(tag, "show speakingNowReminder message finish");        currentReminder = null;        handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);      }    };    reminder.setMessage(msg);    reminder.setAlarm(Integer.toString(MResource.getIdByName(context, MResource.RAW, "jmeetingsdk_begin_speak")));    reminder.setMessageIcon(MResource.getIdByName(context, MResource.DRAWABLE, "jmeetingsdk_message_reminder_begin_speak"));    reminder.setTTS(msg);    reminder.setOpenSound(openSound);    reminder.setOpenTTS(openTTS);    if (0 == reminder.startShow(context, mMessageReminderView)) {      currentReminder = reminder;    } else {      currentReminder = null;      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }  private void requestSpeakReminder(String msg) {    CustomLog.i(tag, "show requestSpeakReminder message");    RequestSpeakReminder reminder = new RequestSpeakReminder() {      @Override      protected void onAutoHide() {        CustomLog.i(tag, "show requestSpeakReminder message finish");        currentReminder = null;        handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);      }    };    reminder.setMessage(msg);    reminder.setAlarm(Integer.toString(MResource.getIdByName(context, MResource.RAW, "jmeetingsdk_request_speak")));    // reminder.setMessageIcon(MResource.getIdByName(context, MResource.DRAWABLE, "message_reminder_begin_speak"));    reminder.setTTS(msg);    reminder.setOpenTTS(openTTS);    reminder.setOpenSound(openSound);    if (0 == reminder.startShow(context, mMessageReminderView)) {      currentReminder = reminder;    } else {      currentReminder = null;      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }  public int init(Context appContext, MessageReminderView messageReminderView) {    CustomLog.i(tag, "init MessageReminderManage");    this.context = appContext;    mMessageReminderView = messageReminderView;    // 设置会议室消息提示,通过设置->音量->默认通知设置是否播放消息;    // 如果设置为静音返回true    this.openSound = false;    CustomLog.e("DEBUG", "openSound=" + openSound);    this.openTTS = true;    CustomLog.i(tag, "消息铃声开关：" + this.openSound + " | TTS 语音播报开关："        + this.openTTS);    meetingMessageList = new ArrayList<MessageInfo>();    isShowReminder = false;    return 0;  }  public void release() {    CustomLog.i(tag, "release MessageReminderManage");    if (null != currentReminder) {      currentReminder.stopShow();      currentReminder = null;    }    isShowReminder = false;    if (null != meetingMessageList) {      meetingMessageList.clear();      meetingMessageList = null;    }  }  public void sendMessage(MessageInfo info) {    CustomLog.i(tag, "send message, type:" + info.type);    if (null == meetingMessageList) {      CustomLog.e(tag, "message reminder manage don't init");      return;    }    meetingMessageList.add(info);    if (!isShowReminder) {      isShowReminder = true;      // 如果没有显示消息提示，发送立即显示指令      handler.sendEmptyMessage(MESSAGE_REMINDER_TAG);    }  }}