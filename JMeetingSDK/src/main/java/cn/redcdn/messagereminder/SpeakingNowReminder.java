package cn.redcdn.messagereminder;import android.content.Context;import cn.redcdn.log.CustomLog;//import com.iflytek.cloud.ErrorCode;////import com.iflytek.cloud.InitListener;////import com.iflytek.cloud.SpeechConstant;////import com.iflytek.cloud.SpeechError;////import com.iflytek.cloud.SpeechSynthesizer;////import com.iflytek.cloud.SynthesizerListener;public abstract class SpeakingNowReminder extends Reminder {  private String TAG = getClass().getName();  private String playText;//  private SpeechSynthesizer mTts;  // 引擎类型//  private String mEngineType = SpeechConstant.TYPE_CLOUD;  // 默认发音人  private String voicer = "xiaoyan";  protected boolean openTTS = false;  public void setTTS(String text) {    playText = text;  }  public void setOpenTTS(boolean opentts) {    this.openTTS = opentts;  }  @Override  public int startShow(Context context, MessageReminderView messageReminderView) {    if (null == playText || playText.isEmpty()) {      CustomLog.e(TAG, "need set init parameter");      return -1;    }    int ret = super.startShow(context, messageReminderView);    if (ret != 0) {      if (openTTS) {        // initTTSSpeech();      } else {        CustomLog.e(TAG, "TTS 语音播报关闭!");        return -2;      }    }    return ret;  }  protected void stopInternal() {    CustomLog.i(TAG, "stop tts speak");//    if (null != mTts) {////      try {////        mTts.stopSpeaking();////        // 退出时释放连接////        mTts.destroy();////        mTts = null;////      } catch (Exception e) {////        CustomLog.d(TAG, "停止tts异常");////      }//    }  }  @Override  protected void playAlarmFinished() {    CustomLog.i(TAG, " begin init tts");    if (openTTS) {      // initTTSSpeech();    }  }  private void initTTSSpeech() {//    try {////      mTts = SpeechSynthesizer.createSynthesizer(context, mTtsInitListener);////    } catch (Exception e) {////      CustomLog.d(TAG, "初始化tts异常");////    }  }  /**   * 初始化监听。   *///  private InitListener mTtsInitListener = new InitListener() {////    @Override////    public void onInit(int code) {////      Log.d(TAG, "InitListener init() code = " + code);////      if (code != ErrorCode.SUCCESS) {////        CustomLog.d(TAG, "初始化失败,错误码：" + code);////      } else {////        // 初始化成功，之后可以调用startSpeaking方法////        // 注：有的开发者在onCreate方法中创建完合成对象之后马上就调用startSpeaking进行合成，////        // 正确的做法是将onCreate中的startSpeaking调用移至这里////        // 设置参数////        setParam();////        int result = mTts.startSpeaking(playText, mTtsListener);////        if (result != ErrorCode.SUCCESS) {////          CustomLog.d(TAG, "语音合成失败,错误码: " + code);////        }////      }////    }////  };  /**   * 合成回调监听。   *///  private SynthesizerListener mTtsListener = new SynthesizerListener() {////    @Override////    public void onSpeakBegin() {////      CustomLog.d(TAG, "开始播放");////    }////////    @Override////    public void onSpeakPaused() {////      CustomLog.d(TAG, "暂停播放");////    }////////    @Override////    public void onSpeakResumed() {////      CustomLog.d(TAG, "继续播放");////    }////////    @Override////    public void onBufferProgress(int percent, int beginPos, int endPos,////        String info) {////      // 合成进度////      // mPercentForBuffering = percent;////      // CustomLog.d(TAG, String.format(getString(R.string.tts_toast_format),////      // mPercentForBuffering, mPercentForPlaying));////    }////////    @Override////    public void onSpeakProgress(int percent, int beginPos, int endPos) {////      // 播放进度////      // mPercentForPlaying = percent;////      // CustomLog.d(TAG, String.format(getString(R.string.tts_toast_format),////      // mPercentForBuffering, mPercentForPlaying));////    }////////    @Override////    public void onCompleted(SpeechError error) {////      if (error == null) {////        CustomLog.d(TAG, "播放完成");////      } else if (error != null) {////        CustomLog.d(TAG, error.getPlainDescription(true));////      }////    }////////    @Override////    public void onEvent(int arg0, int arg1, int arg2, Bundle arg3) {////    }////  };////////  /**////   * 参数设置////   *////   * @param param////   * @return////   */////  private void setParam() {//////    // 清空参数////////    mTts.setParameter(SpeechConstant.PARAMS, null);////////    // 设置合成////////    if (mEngineType.equals(SpeechConstant.TYPE_CLOUD)) {////////      mTts.setParameter(SpeechConstant.ENGINE_TYPE, SpeechConstant.TYPE_CLOUD);////////      // 设置发音人////////      mTts.setParameter(SpeechConstant.VOICE_NAME, voicer);////////      // 设置语速////////      mTts.setParameter(SpeechConstant.SPEED, "50");////////      // 设置音调////////      mTts.setParameter(SpeechConstant.PITCH, "50");////////      // 设置音量////////      mTts.setParameter(SpeechConstant.VOLUME, "50");////////      // 设置播放器音频流类型////////      mTts.setParameter(SpeechConstant.STREAM_TYPE, "3");////////    } else {////////      mTts.setParameter(SpeechConstant.ENGINE_TYPE, SpeechConstant.TYPE_LOCAL);////////      // 设置发音人 voicer为空默认通过语音+界面指定发音人。////////      mTts.setParameter(SpeechConstant.VOICE_NAME, "");////////    }////  }}