package cn.redcdn.util;import android.annotation.SuppressLint;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.List;import java.util.TimeZone;import cn.redcdn.jmeetingsdk1.R;import cn.redcdn.log.CustomLog;@SuppressLint("SimpleDateFormat")public class TimeUpdateUtil {  private final String TAG = "TimeUpdateUtil";  private Context mContext;  private Calendar mCalendar;  private static TimeUpdateUtil mInstance;  private List<TimeUpdateListener> mTimeUpdateListenerList;  private final BroadcastReceiver mClockChangeReceiver = new BroadcastReceiver() {    @Override    public void onReceive(Context context, Intent intent) {      final String action = intent.getAction();      if (Intent.ACTION_TIMEZONE_CHANGED.equals(action)) {        final String tz = intent.getStringExtra("time-zone");        mCalendar = Calendar.getInstance(TimeZone.getTimeZone(tz));      }      autoUpdateTime();    }  };  public static synchronized TimeUpdateUtil getInstance(Context context) {    if (mInstance == null) {      mInstance = new TimeUpdateUtil(context);    }    return mInstance;  }  public Calendar getCurrentCalendar() {    return mCalendar;  }  public void addListener(TimeUpdateListener listener) {    if (!mTimeUpdateListenerList.contains(listener)) {      mTimeUpdateListenerList.add(listener);    }        autoUpdateTime();  }  public void removeListener(TimeUpdateListener listener) {    if (mTimeUpdateListenerList.contains(listener)) {      mTimeUpdateListenerList.remove(listener);    }    if (mTimeUpdateListenerList.size() != 0) {      unregisterReceivers();    }  }  private TimeUpdateUtil(final Context context) {    mContext = context;    mCalendar = Calendar.getInstance();    mTimeUpdateListenerList = new ArrayList<TimeUpdateListener>();    registerReceivers();  }  public boolean getDayOrNight() {    mCalendar.setTimeInMillis(System.currentTimeMillis());    int h = mCalendar.get(Calendar.HOUR_OF_DAY);    return (h < 18 && h >= 6) ? true : false;  }  public String getCurrentWeekText() {    mCalendar.setTimeInMillis(System.currentTimeMillis());    SimpleDateFormat dateFormat = new SimpleDateFormat("E");    String output = dateFormat.format(mCalendar.getTime());    output = output.replaceFirst(mContext.getString(R.string.week), mContext.getString(R.string.xingqi));    return output;  }  public String getCurrentDayText() {    mCalendar.setTimeInMillis(System.currentTimeMillis());    SimpleDateFormat dateFormat = new SimpleDateFormat("dd");    return dateFormat.format(mCalendar.getTime());  }  public String getCurrentTimeText() {    mCalendar.setTimeInMillis(System.currentTimeMillis());    SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm");    return dateFormat.format(mCalendar.getTime());  }  public String getCurrentDateText() {    mCalendar.setTimeInMillis(System.currentTimeMillis());//    Locale current = mContext.getResources().getConfiguration().locale;    SimpleDateFormat dateFormat;    String output = "00:00";//    if (current.equals(Locale.CHINA) || current.equals(Locale.TAIWAN)) {//      dateFormat = new SimpleDateFormat("M-d= E");//      output = dateFormat.format(mCalendar.getTime());//      output = output.replaceFirst("-", "月");//      output = output.replaceFirst("=", "日");//    } else {      dateFormat = new SimpleDateFormat("MM/dd");      output = dateFormat.format(mCalendar.getTime());//    }    return output;  }  private void autoUpdateTime() {    for (TimeUpdateListener listener : mTimeUpdateListenerList) {      listener.onTimeUpdated();    }  }  private void registerReceivers() {    final IntentFilter clockFilter = new IntentFilter();    clockFilter.addAction(Intent.ACTION_LOCALE_CHANGED);    clockFilter.addAction(Intent.ACTION_TIME_TICK);    clockFilter.addAction(Intent.ACTION_TIME_CHANGED);    clockFilter.addAction(Intent.ACTION_TIMEZONE_CHANGED);    try {      mContext.registerReceiver(mClockChangeReceiver, clockFilter);    } catch (Exception e) {      CustomLog.e(TAG, "TimeUpdateUtil 注册广播 error!" + e.toString());    }  }  private void unregisterReceivers() {    try {      mContext.unregisterReceiver(mClockChangeReceiver);    } catch (Exception e) {      CustomLog.e(TAG, "TimeUpdateUtil 取消注册广播 error!" + e.toString());    }  }  public interface TimeUpdateListener {    void onTimeUpdated();  }}